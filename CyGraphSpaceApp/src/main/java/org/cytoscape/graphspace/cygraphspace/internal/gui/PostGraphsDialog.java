package org.cytoscape.graphspace.cygraphspace.internal.gui;

import java.awt.Component;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.Vector;
import java.util.stream.Collectors;

import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

import org.cytoscape.graphspace.cygraphspace.internal.singletons.Server;
import org.graphspace.javaclient.Graph;

import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

public class PostGraphsDialog extends javax.swing.JDialog {

    private JCheckBox administeredByMe;
    private JButton done;
    private JLabel hiddenLabel;
    private JLabel hostLabel;
    private JLabel jLabel3;
    private JScrollPane jScrollPane1;
    private JSeparator jSeparator1;
    private JTable resultsTable;
    private JButton search;
    private JTextField searchField;
    private JButton selectNetwork;
    private JLabel hostName;
    private JLabel username;
	private static final long serialVersionUID = 1L;
	private List<Graph> graphSummaries;
    
    /**
     * Creates new form SimpleSearch
     */
    public PostGraphsDialog(Frame parent) {
        super(parent, true);
        initComponents();
        prepComponents();
    }
    
    public void setFocusOnDone() {
        this.getRootPane().setDefaultButton(done);
        done.requestFocus();
    }
    
    private void prepComponents() {
        this.setModal(true);
        this.getRootPane().setDefaultButton(search);
        hostName = new JLabel();
        hostName.setText(Server.INSTANCE.getHost());
        
        if(Server.INSTANCE.isAuthenticated()){
            username.setText(Server.INSTANCE.getUsername());
        }
        
        //TODO: if not authenticated, open the authentication dialog or just show an error.
//        else
//        {
//        	if (Server.INSTANCE.getUsername() != null) {
//        		try {
//        		}
//        	} else {
//        	}
//        }

    }

    //TODO: error messages
    private void load(final Graph graph) {
    	final Component me = this;
    	boolean largeGraph = false;
        
        SwingWorker<Integer,Integer> worker = new SwingWorker<Integer, Integer>() {

            @Override
            protected Integer doInBackground() throws Exception {
            	{
	                String id = graph.getId();
	                try
	                {
	                    //createCyNetworkFromCyjs(); //, finalLargeNetwork);
	               //     me.setVisible(false);
	                }
	                catch (IOException ex)
	                {
	                	JOptionPane.showMessageDialog(me, "", "Error", JOptionPane.ERROR_MESSAGE);
	                    return -1;
	                }
            	}
	            return 1;
            }
        };
	    worker.execute();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        selectNetwork = new javax.swing.JButton();
        done = new javax.swing.JButton();
        search = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        administeredByMe = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        hostLabel = new javax.swing.JLabel();
        hostName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        hiddenLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Find Networks");
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null}
            },
            new String []
            {
                "Network Title", "Number of Nodes", "Number of Edges", "Owned By", "Last Modified"
            }
        )
        {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, true
            };

            @Override
			public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        resultsTable.getColumnModel().getColumn(1).setMinWidth(50);
        resultsTable.getColumnModel().getColumn(1).setMaxWidth(100);
        resultsTable.getColumnModel().getColumn(2).setMinWidth(100);
        resultsTable.getColumnModel().getColumn(2).setMaxWidth(100);
        
        jScrollPane1.setViewportView(resultsTable);

        selectNetwork.setText("Load Network");
        
        selectNetwork.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                int selectedIndex = resultsTable.getSelectedRow();
                if( selectedIndex == -1 )
                {
                	//TODO: error message
                    JOptionPane.showMessageDialog((Component)evt.getSource(), "", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                Graph graph = displayedGraphSummaries.get(selectedIndex);
            //    NetworkManager.INSTANCE.setSelectedNetworkSummary(ns);

                load(graph);
            }
        });

        done.setText("Done Loading Networks");
        done.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                setVisible(false);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchActionPerformed(evt);
            }
        });

        administeredByMe.setText("My Networks");
        administeredByMe.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
            {
            	JCheckBox cb = (JCheckBox)evt.getSource();
            	searchField.setEnabled(!cb.isSelected());
            	if ( cb.isSelected()) {
            	   getMyGraphSummaries();	
                   //administeredByMeActionPerformed();
            	} else {
            		search();
            	}
            }
        });

        hostLabel.setText("Current Source: ");

        hostName.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        hostName.setText("Server1");

        jLabel3.setText("Authenticated As: ");

        username.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        username.setText("Not Authenticated");

        hiddenLabel.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 1184, Short.MAX_VALUE)
        				.addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(0, 1001, Short.MAX_VALUE)
        					.addComponent(done, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(searchField, Alignment.TRAILING, 1093, 1093, 1093)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(administeredByMe)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(hiddenLabel)))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(search))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(hostLabel)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(hostName))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel3)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(username)))
        					.addGap(0, 821, Short.MAX_VALUE))
        				.addComponent(selectNetwork, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(hostLabel)
        				.addComponent(hostName))
        			.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel3)
        				.addComponent(username))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(searchField, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(search, Alignment.TRAILING))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(administeredByMe)
        				.addComponent(hiddenLabel))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 275, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(selectNetwork)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(done)
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void selectNetworkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectNetworkActionPerformed
    {//GEN-HEADEREND:event_selectNetworkActionPerformed
        int selectedIndex = resultsTable.getSelectedRow();
        if( selectedIndex == -1 )
        {
        	//TODO: error message
            JOptionPane.showMessageDialog(this, "", "Error", JOptionPane.ERROR_MESSAGE);
        }
        Graph graph = displayedGraphSummaries.get(selectedIndex);
    //    NetworkManager.INSTANCE.setSelectedNetworkSummary(ns);

        load(graph);
    }//GEN-LAST:event_selectNetworkActionPerformed

    
    private void getMyGraphSummaries() {
        String host = Server.INSTANCE.getHost();
       
        try {
			if(Server.INSTANCE.isAuthenticated())
			{
			    try{
				        graphSummaries = getMyGraphs(Server.INSTANCE.getUsername());
			    }
			    catch (IOException ex)
			    {         
			        ex.printStackTrace();
			        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
			        return;
			    }
			    showSearchResults( ); 
			}
			else
			{
				//TOD0: error message 
			    JOptionPane.showMessageDialog(this, "", "Error", JOptionPane.ERROR_MESSAGE);
			    this.setVisible(false);
			}
		} catch (HeadlessException | IOException e) {
			//TOD0: error message 
			e.printStackTrace();
		    JOptionPane.showMessageDialog(this, "", "Error", JOptionPane.ERROR_MESSAGE);

		}
    }    
    
    private void search() {
        
    }
    
    private void searchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchActionPerformed
    {//GEN-HEADEREND:event_searchActionPerformed
        search();
        
    }

    private List<Graph> displayedGraphSummaries = new ArrayList<>();
    private void showSearchResults()
    {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers( new String[]
        {
            "Network Title", "Number of Nodes", "Number of Edges", "Owned By", "Last Modified"
        });
        displayedGraphSummaries.clear();
        for( Graph graphSummary : graphSummaries )
        {
        	
//        	if (graphSummary.getErrorMessage() != null)
//        		continue;
        	
            Vector row = new Vector();
            
            //Network Title
            if (graphSummary.getName() !=null)
            	row.add(graphSummary.getName());
            else {
            	row.add("Network: " + graphSummary.getId().toString());
            }
            //Number of Nodes
            row.add(graphSummary.getNumberOfNodes());
            //Number of Edges
            row.add(graphSummary.getNumberOfEdges());
            //Owned By
            row.add(graphSummary.getUsername());
            //Last Modified
            row.add(graphSummary.getLastModified());
               
            model.addRow(row);
            displayedGraphSummaries.add(graphSummary);
        }
        resultsTable.setModel(model);
        resultsTable.getSelectionModel().setSelectionInterval(0, 0);
    }
    
}
